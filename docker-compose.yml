services:
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: ocs_user
      POSTGRES_PASSWORD: ocs_pass
      POSTGRES_DB: ocs_portal
    ports:
      - "5433:5432" # Changed host port to 5433 to avoid conflict
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ocs_user -d ocs_portal"]
      interval: 5s
      timeout: 5s
      retries: 5

  ocs-tickets-api:
    build:
      context: .
      dockerfile: ocs-tickets-api/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://ocs_user:ocs_pass@db:5432/ocs_tickets
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=ocs_user
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "./healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3

  ocs-purchasing-api:
    build:
      context: .
      dockerfile: ocs-purchasing-api/Dockerfile
    ports:
      - "8002:8000"
    environment:
      - DATABASE_URL=postgresql://ocs_user:ocs_pass@db:5432/ocs_purchasing
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=ocs_user
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "./healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3

  ocs-portal-py:
    build:
      context: .
      dockerfile: ocs-portal-py/Dockerfile
    ports:
      - "8003:8000"
    environment:
      - DATABASE_URL=postgresql://ocs_user:ocs_pass@db:5432/ocs_portal
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=ocs_user
      # Azure AD Configuration
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_REDIRECT_URI=${AZURE_REDIRECT_URI}
      # Security Configuration
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_TIMEOUT_MINUTES=${SESSION_TIMEOUT_MINUTES}
      - MAX_CONCURRENT_SESSIONS=${MAX_CONCURRENT_SESSIONS}
      # Application Settings
      - DEBUG=${DEBUG}
      - HOST=${HOST}
      - PORT=${PORT}      # Microservice URLs for integration
      - TICKETS_API_URL=http://ocs-tickets-api:8000
      - PURCHASING_API_URL=http://ocs-purchasing-api:8000
      - MANAGE_API_URL=http://ocs-manage-api:8000
      - FORMS_API_URL=http://ocs-forms-api:8000
    depends_on:
      db:
        condition: service_healthy
      ocs-tickets-api:
        condition: service_healthy
      ocs-purchasing-api:
        condition: service_healthy

  ocs-manage-api:
    build:
      context: .
      dockerfile: ocs-manage/Dockerfile
    ports:
      - "8004:8000"
    environment:
      - DATABASE_URL=postgresql://ocs_user:ocs_pass@db:5432/ocs_manage
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=ocs_user
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "./healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3

  ocs-forms-api:
    build:
      context: .
      dockerfile: ocs-forms-api/Dockerfile
    ports:
      - "8005:8000"
    environment:
      - DATABASE_URL=postgresql://ocs_user:ocs_pass@db:5432/ocs_forms
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=ocs_user
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "./healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  pgdata:
