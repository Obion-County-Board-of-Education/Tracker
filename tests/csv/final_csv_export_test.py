#!/usr/bin/env python3
"""
Final CSV Export Functionality Test
Tests all CSV export endpoints and verifies complete functionality
"""

import requests
import csv
import io
from datetime import datetime

def test_endpoint(url, description):
    """Test a single endpoint and return results"""
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            # Check if it's CSV content
            if 'text/csv' in response.headers.get('content-type', ''):
                # Parse CSV to count rows
                csv_content = response.text
                rows = list(csv.reader(io.StringIO(csv_content)))
                headers = rows[0] if rows else []
                data_rows = len(rows) - 1 if len(rows) > 1 else 0
                
                return {
                    'status': '‚úÖ SUCCESS',
                    'code': response.status_code,
                    'content_type': response.headers.get('content-type'),
                    'content_disposition': response.headers.get('content-disposition'),
                    'content_length': len(response.content),
                    'csv_headers': headers,
                    'csv_rows': data_rows
                }
            else:
                # Check if HTML page contains Export CSV button
                if 'Export CSV' in response.text:
                    return {
                        'status': '‚úÖ SUCCESS (HTML with Export button)',
                        'code': response.status_code,
                        'content_type': response.headers.get('content-type'),
                        'has_export_button': True,
                        'has_clear_button': False  # Clear All Tickets functionality has been removed
                    }
                else:
                    return {
                        'status': '‚ö†Ô∏è WARNING (HTML without Export button)',
                        'code': response.status_code,
                        'content_type': response.headers.get('content-type'),
                        'has_export_button': False
                    }
        else:
            return {
                'status': '‚ùå FAILED',
                'code': response.status_code,
                'error': response.text[:200]
            }
    except Exception as e:
        return {
            'status': '‚ùå ERROR',
            'error': str(e)
        }

def main():
    print("=" * 70)
    print("FINAL CSV EXPORT FUNCTIONALITY TEST")
    print(f"Test Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 70)
    
    # Test endpoints
    endpoints = [
        # API endpoints (direct CSV downloads)
        ('http://localhost:8000/api/tickets/tech/export', 'API - Tech Tickets CSV Export'),
        ('http://localhost:8000/api/tickets/maintenance/export', 'API - Maintenance Tickets CSV Export'),
        
        # Portal endpoints (CSV downloads through portal)
        ('http://localhost:8003/tickets/tech/export', 'Portal - Tech Tickets CSV Export'),
        ('http://localhost:8003/tickets/maintenance/export', 'Portal - Maintenance Tickets CSV Export'),
        
        # UI pages (should contain Export CSV buttons)
        ('http://localhost:8003/tickets/tech/open', 'Portal - Tech Open Tickets Page'),
        ('http://localhost:8003/tickets/tech/closed', 'Portal - Tech Closed Tickets Page'),
        ('http://localhost:8003/tickets/maintenance/open', 'Portal - Maintenance Open Tickets Page'),
        ('http://localhost:8003/tickets/maintenance/closed', 'Portal - Maintenance Closed Tickets Page'),
    ]
    
    results = []
    for url, description in endpoints:
        print(f"\nTesting: {description}")
        print(f"URL: {url}")
        result = test_endpoint(url, description)
        results.append((description, result))
        
        print(f"Status: {result['status']}")
        if 'code' in result:
            print(f"HTTP Code: {result['code']}")
        if 'content_type' in result:
            print(f"Content Type: {result['content_type']}")
        if 'content_disposition' in result:
            print(f"Download Header: {result['content_disposition']}")
        if 'csv_headers' in result:
            print(f"CSV Headers: {result['csv_headers'][:5]}...")  # Show first 5 headers
            print(f"CSV Data Rows: {result['csv_rows']}")
        if 'has_export_button' in result:
            print(f"Has Export Button: {result['has_export_button']}")
            print(f"Has Clear Button: {result.get('has_clear_button', False)}")
        if 'error' in result:
            print(f"Error: {result['error']}")
    
    # Summary
    print("\n" + "=" * 70)
    print("TEST SUMMARY")
    print("=" * 70)
    
    csv_exports = [r for r in results if 'CSV Export' in r[0]]
    ui_pages = [r for r in results if 'Page' in r[0]]
    
    csv_success = sum(1 for _, r in csv_exports if r['status'].startswith('‚úÖ'))
    ui_success = sum(1 for _, r in ui_pages if r['status'].startswith('‚úÖ'))
    
    print(f"CSV Export Endpoints: {csv_success}/{len(csv_exports)} working")
    print(f"UI Pages with Export Buttons: {ui_success}/{len(ui_pages)} working")
    
    if csv_success == len(csv_exports) and ui_success == len(ui_pages):
        print("\nüéâ ALL TESTS PASSED! CSV Export functionality is fully working.")
        print("\nFeatures confirmed:")
        print("‚úÖ API endpoints serving CSV files with proper headers")
        print("‚úÖ Portal endpoints serving CSV files through FastAPI")
        print("‚úÖ Export buttons present on all ticket listing pages")
        print("‚úÖ Proper file naming with date stamps")
        print("‚úÖ CSV content with headers and data rows")
    else:
        print("\n‚ö†Ô∏è Some tests failed. Please check the detailed results above.")
    
    print("\n" + "=" * 70)

if __name__ == "__main__":
    main()
